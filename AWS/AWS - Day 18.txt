												AWS_Day 18
-------------------------------------------------------------------------------------------------------------------------------------------------
Project 5: Automating the Start and Stop of EC2 Instances

This work can be done in 3 ways, 1) Using Amazon EventBridge	2) AWS Lambda	3) AWS Event Scheduler

1. Launch Ubuntu 24.04, 64-bit ARM, t4g.micro

2. Amazon Event Bridge ----> Scheduler (leftpane) ----> Schedule groups (leftpane) ----> Create schedule group ----> Name: MyGroup, Add new tabg ----> Key: DevOps, Value: <InstanceName> ----> Create schedule group

3. Amazon Event Bridge ----> Schedule (leftpane) ----> Create schedule ----> Name: EC2Start ----> Schedule group: Select the one from drop down ----> Occurence: Recurring Schedule, Time Zone: IST ----> Schedule type: Cron-based schedule, Cron expression: 0 7 ? * 2-6 *, Flexible time window: off (Ex: If you keep 5 mins, it will take 5 extra minutes from the scheduled time to do the task) ----> Next ----> Target API: All APIs, EC2, StartInstances, Scroll down in the place of "MyData" paste the instance id ----> Next ----> Enable the toogle bar of 'Enable schedule' ----> Action after schedule completion: None ----> Retry policy: Enable the toogle bar of 'retry' (in the video this option is disabled), Max Age of Event: 24 hrs (remove this), 15 minutes, Retry attempts: 1 ----> DLO: None ----> Permissions: Goto  IAM Console (open in new tab) ----> Create role ----> Entity type: AWS Service, Usecase: CloudWatch Events ----> Next ----> You will see 2 policies attached (CloudWatchEventsBuiltInTargetExecutionAccess, CloudWatchEventsInvocationAccess) ----> Next ----> Name: StartVM ----> Create role

Open the role created ----> 'trust relationships' tab ----> Edit trust policy ----> Remove the existing one and Paste the below policy ---->
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "events.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "scheduler.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}

 ----> Update policy ----> 'Permissions' tab ----> Add permissions ----> attach policies ----> EC2FullAccess ----> Add permissions ----> Goback to the EventBridge tab in browser ----> Scroll down to 'Permissions' ----> Select the role create above, after refreshing ----> Next ----> Create schedule

Lets create another schedule for Stopping the VMs
4. Schedule (leftpane) ----> Create schedule ----> Name: EC2Stop ----> Schedule group: Select the one from drop down ----> Occurrence: Recurring Schedule, Time Zone: IST ----> Schedule type: Cron-based schedule, Cron expression: 0 16 ? * 2-6 *, Flexible time window: off (Ex: If you keep 5 mins, it will take 5 extra minutes from the scheduled time to do the task) ----> Next ----> Target API: All APIs, EC2, StopInstances, Scroll down in the place of "MyData" paste the instance id ----> Next ----> Enable the toogle bar of 'Enable schedule' ----> Action after schedule completion: None ----> Retry policy: Enable the toogle bar of 'retry' (in the video this option is disabled), Max Age of Event: 24 hrs (remove this), 15 minutes, Retry attempts: 1 ----> DLO: None ----> Permissions: 'Check' use existing role, Select the IAM Role created from dropdown ----> Next ----> Create schedule
========================================================================================================
Project 6: Build TicTacToe on AWS using EC2, IAM Role and DynamoDB

Dynamo DB is a NoSQL DB where AWS will manage the backend server
Dynamo DB is serverless
In this app, all the user information will be stored in the backend DB

1. Create IAM Role 
'Check' AWS Service ---> use case: EC2, 'Check' EC2 ---> Next ---> Add 'DynamoDBFullAccess' ---> Next ---> Name: Game-Role ---> Create Role

2. Launch VM (Amazon Linux 2 AMI, t2.micro, Open Port 5000) ---> Advanced ---> IAM Instance Profile: Select the IAM Role created above, Metadata accessible: Enabled, Metadata Version: V1 and V2 (token optional) [This metadata will help us to get the metadata generated by IAM Role we have attached] ---> Launch VM

3. Connect to the VM
sudo su

Installation Steps
----------------------------
Install Development Tools and Dependencies
Installs essential development tools and libraries needed for compiling and building software.
sudo yum groupinstall -y "Development Tools"

Installs development headers and libraries for OpenSSL, bzip2, and libffi, required for Python.
sudo yum install -y openssl-devel bzip2-devel libffi-devel

Install Python 2.7.18
Downloads Python 2.7.18, extracts it, configures the build with optimizations enabled, and installs it without replacing the system-provided Python.
cd /usr/src
sudo wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
sudo tar xzf Python-2.7.18.tgz
cd Python-2.7.18
sudo ./configure --enable-optimizations
sudo make altinstall

Verify the installed Python version.
python2.7 -V

Install pip for Python 2.7
Downloads and installs pip for Python 2.7.
wget https://bootstrap.pypa.io/pip/2.7/get-pip.py
python get-pip.py

Install Python Packages
Installs Flask, Boto (for AWS SDK), and configparser Python packages using pip.
pip install Flask
pip install boto
pip install configparser

Install Git
Installs Git, a version control system.
yum install git -y

Clone the TicTacToe Project Repository
Clones the TicTacToe project repository from GitHub into the /home/ec2-user/ directory.

cd /home/ec2-user/
git clone https://github.com/KastroVKiran/DynamoDB_AWS_Project.git


After executing the above last command ---> ls ---> cd <ClonedRepoName> ---> ls ---> You will see all the files ---> We need to do some configurations ---> vi config ---> Change the region and endpoint as per the region code ---> esc ---> :wq ---> vi config.ini ---> Here also change the region ---> esc ---> :wq

Lets run the application.py file which is there inside the cloned repo
python application.py --config config.ini --mode service --endpoint dynamodb.ap-south-1.amazonaws.com --serverPort 5000

Open port number 5000 for the instance

Access the app [Chrome browser] ---> <PublicIP>:5000 ---> You will see App ---> Enter any name on the top right side next to Login and click on Login ---> Click on 'Create Table' ---> Goto Dynamo DB, you will see 'Games' table. This table got created because of the setupDynamoDB.py file ---> Click on 'Games' tables ---> You dont see any items currently. Whenever we play a game, all those moves will be stored here. Lets see that practically.

Goto the browser where app is opened ---> Copy the public ip and 5000 and open the app in new browser [Firefox] (This is done because we need two players for the game) ---> Login as explained above

Goto Chrome browser ---> Click on 'Create' ---> Enter the name you have used to login in Firefox browser ---> Create game ---> Goto the Firefox browser and reload the page. You will see a request in Firefox browser. Accept it. ---> Play the game based on the 'turn' in the app. Finish the game successfully.

Lets verify the data in Dynamo DB ---> Goto Dynamo DB ---> Open the 'games'  ---> Click on 'Scan or query items' ---> 'Check' Scan ---> Click on RUN ---> You will see the details. ---> To know more details of the played game, click on the item and you can see each and every move got stored.

-----------------------
AWS Services
-----------------------
S3, EC2, IAM, VPC, RDS, Route 53, CloudWatch, CloudTrial, DataSync, CLI, Wordpress, CloudFront, DNS, SNS, Lambda, Code Build, Code Pipeline, ECR, ECS, Dynamo DB, Billing, AWS Config, Systems Manager (22+)

Project 1 - AWS 3 Tier Architecture
Project 2 - Wordpress Site
Project 3 - ECR-ECR
Project 4 - Game App
Project 5 - Automating the start and stop of EC2 instance
Project 6 - Deploy NodeJS app with PM2 on AWS EC2 instance

------------------
DevOps
------------------
Linux, Shell Scripting, Python, Maven, Git & GitHub, Jenkins (2), Ansible, Terraform, Docker (4), K8S, Monitoring

Project 1 - Zomato
Project 2 - Swiggy
Project 3 - Creating EKS Cluster using Terraform & Jenkins
Project 4 - BookMyShow
Project 5 - Nexus
Project 6 - SonarQube 


Develop a LinkedIn profile

Jira Playlist:
https://www.youtube.com/watch?v=d0M2s0KiIrc&list=PLL34mf651faOpDaNGr4tt6FF_nUYb7ypt










