												Day 03 _Kubernetes
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
K8S Service - Load Balancer

Load Balancer will distribute the traffic equally to all the Worker Nodes available in the cluster

Cluster IP - To access all pods using single IP i.e Static IP
NodePort - To access the pods outside of the cluster. Here we will use Node IP to access the app inside the pod
LoadBalancer - To distribute the load equally to all the worker nodes and access pods outside of the cluster

Namespace:
Namespace is used to group the K8S components logically
We can create multiple namespaces in K8S cluster
Namespaces are isolated
Whenever we create the pods under a namespace, when we delete that namespace, all the pods inside that namespace will also gets DELETED

To see the namespaces available: kubectl get namespace (or) kubectl get ns
Default namespaces;
NAME              STATUS   AGE
default           Active   25h
kube-node-lease   Active   25h
kube-public       Active   25h
kube-system       Active   25h


Whenever we create pods or services, all of them will get created under 'default' namespace

To see the pods running under a particular namespace: kubectl get pods -n <NameSpaceName>
We shouldn't create K8S components under 'kube-public' and 'kube-system' and 'kube-node-lease' as these namespaces are used by K8S to run cluster components

To see everything running on a particular namespace: kubectl get all -n <NameSpaceName>
In real-time, it is always recommended to create K8S components in the custom namespace

How to create custom namespace in K8S Cluster?
To create a namespace: kubectl create ns <NameSpaceName>

Namespaces can be created in 2 ways;
1. using direct command
2. using Manifest yml file

To delete a namespace: kubectl delete ns <NameSpaceName>


Always we need to create the pods using below K8S components;
1. Replication Controller
2. Replica Set
3. Deployment
4. Stateful Set
5. Daemon Set

If you create the pods using above K8S components, K8S will provide self healing capability. If you pod is crashed, K8S will recreate it.

1. Replication Controller (RC)
It is a K8S component to create pods
It will make sure always given number of pods are running for our app. It means, if i ask to create 5 pods for my app, if any one pod gets crashed, replication controller will create a new pod to match the given number of pods i.e 5
RC will take care of pod lifecycle
using RC, we can scale up and scale down the pods. it means if i have created 5 pods for my ap, now, after a month i want 10 pods to run for my app, RC will take care of it


---
apiVersion: v1
kind: ReplicationController
metadata:
  name: javawebapprc
spec:
  replicas: 3
  selector: 
    app: javawebapp
  template: #from here we will write the pod template
    metadata:
      name: javawebapppod
      labels:
        app: javawebapp
    spec:
      containers:
        - name: javawebappcontainer
          image: kastrov/swiggy
          ports:
            - containerPort: 3000
---
#from here service manifest file is written i.e to expose the pods
apiVersion: v1
kind: Service
metadata:
  name: javawebappsvc
spec:
  type: NodePort
  selector:
    app: javawebapp
  ports:  
    - port: 80
      targetPort: 3000
      NodePort: 30999
---






































