												Day 02 _Kubernetes
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Pod Manifest File
Here we will create a POD

To see the worker nodes ----> kubectl get nodes
To see the cluster data ----> 
	All the cluster related info will be available in .kube directory. But .kube is a hidden directory. Inside this .kube directory we will have config 	file ----> cat config

Note: Never change anything in the config file

Path: /home/ubuntu/.kube

using 'kubectl' we can communicate with the Control Plane
We cannot see the control and we cannot manage it.

To see the pods: kubectl get pods
To create a pod: kubectl apply -f <pod-yml-filename>
Note: Only if the yml syntax is correct the pod will get created

---
apiVersion: v1
kind: Pod #Kind is written as Pod, because we are creating a POD here
metadata:
  name: javawebapppod #its a pod name
  labels: #to identify pods in the cluster, we will give labels. Label is an ID for the Pod
    app: javawebapp #pod label
spec: #here we will specify what we want to do with pod
  containers: #here we are creating a container
    - name: javawebappcontainer #container name
      image: kastrov/javaappkastro
      ports: #port mapping
        - containerPort: 8080 #any number can be given
---

To see in which worker node pod got created: kubectl describe pod <PodName>
To see the log data of the pod: kubectl logs <PodName>
To see the details of a pod: kubectl get pods -o wide

Can we access the app running inside a pod?
NO. We cannot access app outside the pod. Because pods cannot be accessed outside of the cluster. By default, in K8S pods are specific to cluster.

To access the pods outside of the cluster, we need to expose the pods for outside access.
We will use K8S "Service" concept to expose the pods outside of the cluster

--------------------
K8S Service
--------------------
K8S Service concept is used to expose the pods outside of the cluster.
We have 3 types of K8S Services to expose the pods outside of cluster;
	1. Cluster IP
	2. Node Port
	3. Load Balancer
	4. Headless - not preferred

Lets create a service manifest file to expose the pod outside of cluster
---
apiVersion: v1
kind: Service
metadata: 
  name: javawebappsvc #Service name. Any name can be given
spec: # used to identify the lable of a pod
  type: NodePort
  selector: # it is used to identify the pod by using pod label
    app: javawebapp
  ports: 
  - port: 80 #serivce cluster host port
    targetPort: 8080 #container port
---


To create a service manifest file: kubectl apply -f <ServiceManifestFileName>


App - 4 pods - 2 pods in worker node 1, 2 pods in worker node 2

4 pods - 3 pods got crashed, automatically 3 more pods will get created by EKS/AWS - New pod ips
The process of automatically creating a new pods is known as Self Healing Capacity

To access the pods within the cluster, we will use Cluster IP service
in Cluster IP service all the pods are mapped to single IP address, which is called as Static IP
If you want to access/expose the pods outside of the cluster, then we can use either NodePort or LoadBalancer


1.Cluster IP

When we will use Cluster IP service?
when we create the pods, every pod will have an unique IP
we can access the pods inside the cluster using its Pod IP
But pods are ephermal, whenever a pod is recreated its IP will change. So its not recommended to depend on Pod IP to access our app.
The solution is to expose the pods within the cluster, we can use Cluster IP service
Tjhis will generate Static IP to access the pods within the cluster
Cluster IP will not change when the pods are recreated


2. NodePort
Node Port is a service which is used to expose the pod outside of the cluster
When we are using Node Port service, we will specify the type as "NodePort" in service manifest file
if we dont specify the NodePort number, K8S will provide a random ip using which we have to access the app.
If we want to run our app on our own port number then specify the port number under nodePort in the service manifest file

To delete all the deployments and start a fresh deployment: kubectl delete all --all

Manifest file (2 in 1): Pod and service manifests are in the same file
---
apiVersion: v1
kind: Pod
metadata: 
  name: javawebapppod
  labels:
    app: javawebapp
spec:
  containers:
    - name: javawebappcontainer
      image: kastrov/zomato
      ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata: 
  name: javawebappsvc
spec:
  type: NodePort
  selector: 
    app: javawebapp
  ports: 
    - port: 80
      targetPort: 3000
      nodePort: 31877 #any number can be given but it has to be b/w 30000 and 32767
---

Create the pod
Check in which worker node the pod is created
Open the port given in above service manifest file of worker node security group
access the app: http://13.127.196.123:31877/







































